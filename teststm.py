#from TCN_STM32_protocol import STM32_command

# stmc = STM32_command()

# from TCN_socket import UDP_client
# import time


# udpc = UDP_client()
# while True:
#     start = time.time()
#     udpc.send_list([ 1 for x in range(4000)])
#     end = time.time()
#     print(end - start)

'''
import socket
import sys
import time

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the port
server_address = ('localhost', 10000)
print('starting up on {} port {}'.format(*server_address))
sock.bind(server_address)

# Listen for incoming connections
sock.listen(1)

while True:
    # Wait for a connection
    print('waiting for a connection')
    connection, client_address = sock.accept()
    try:
        print('connection from', client_address)

        # Receive the data in small chunks and retransmit it
        while True:
            data = connection.recv(16)
            print('received {!r}'.format(data))
            if data:
                print('sending data back to the client')
                connection.sendall(data)
            else:
                print('no data from', client_address)
                break
            time.sleep(1)

    except:
        # Clean up the connection
        connection.close()
'''

'''
import testa

class abc(testa.cdf):
    
    def __init__(self):
        self.c()


if __name__ == "__main__":
    a = abc()
'''




# import TCN_socket
# import time
# # server = TCN_socket.TCP_server(55555,1)
# server = TCN_socket.TCP_client(55555)
# # server = TCN_socket.UDP_client(55555,1)
# i = 0
# while True:
#     try:
#         data = [[(1,2,3),(1,2,3)] , i]
#         # data = [[(24, 350.9375, 2266.25), (25, 352.15625, 2263.25), (25, 353.40625, 2241.0), (25, 354.59375, 2246.0), (25, 355.8125, 2242.0), (23, 357.046875, 2245.75), (9, 358.328125, 2062.25), (18, 2.015625, 2064.25), (9, 4.6875, 1550.25), (16, 7.1875, 1527.0), (10, 8.375, 1532.25), (16, 9.546875, 1595.0), (15, 10.8125, 1613.25), (9, 18.484375, 557.25), (10, 19.859375, 543.0), (10, 21.21875, 541.0), (11, 22.34375, 548.25), (9, 23.40625, 562.5), (10, 25.765625, 586.0), (10, 26.921875, 626.0), (27, 28.75, 833.75), (27, 29.84375, 841.25), (30, 31.171875, 853.5), (29, 32.296875, 864.5), (29, 33.53125, 875.5), (27, 34.734375, 889.25), (24, 38.0625, 605.0), (24, 39.28125, 585.0), (25, 40.609375, 567.5), (20, 41.984375, 554.5), (21, 43.296875, 536.5), (27, 44.578125, 525.5), (24, 46.03125, 513.75), (27, 47.265625, 503.0), (27, 48.625, 491.75), (27, 49.859375, 482.5), (30, 51.015625, 473.0), (27, 52.515625, 464.0), (26, 53.796875, 456.5), (25, 55.078125, 448.75), (12, 58.828125, 236.75), (24, 60.609375, 231.75), (16, 61.25, 238.75), (23, 64.34375, 228.75), (10, 64.1875, 240.0), (18, 68.75, 389.75), (17, 70.0625, 387.25), (17, 71.25, 384.0), (15, 72.640625, 382.25), (17, 74.1875, 376.75), (18, 75.359375, 374.75), (16, 76.28125, 372.5), (20, 77.765625, 370.25), (18, 79.046875, 368.75), (16, 80.265625, 366.0), (32, 81.65625, 363.5), (17, 82.984375, 363.0), (17, 83.734375, 362.25), (25, 85.375, 360.75), (28, 86.59375, 360.25), (32, 87.453125, 359.5), (31, 89.171875, 358.25), (33, 90.4375, 358.25), (36, 91.3125, 358.25), (37, 92.65625, 358.25), (29, 93.75, 358.75), (29, 95.34375, 358.5), (26, 96.640625, 358.5), (23, 97.40625, 359.5), (18, 98.59375, 361.75), (9, 102.359375, 383.5), (22, 103.75, 375.25), (20, 104.65625, 378.25), (10, 106.515625, 348.25), (19, 107.75, 351.75), (21, 108.46875, 355.75), (22, 109.796875, 358.5), (22, 111.09375, 361.0), (23, 112.109375, 363.5), (21, 113.546875, 365.75), (21, 114.3125, 370.0), (22, 115.5625, 373.75), (20, 117.03125, 376.5), (21, 118.1875, 380.5), (21, 119.09375, 385.25), (23, 120.546875, 389.25), (26, 124.75, 252.75), (26, 126.890625, 239.25), (10, 128.125, 242.25), (33, 127.09375, 256.25), (10, 128.75, 245.5), (18, 132.09375, 449.0), (18, 133.375, 457.75), (16, 134.578125, 467.75), (21, 135.765625, 476.75), (19, 136.953125, 486.0), (17, 138.078125, 496.75), (18, 139.21875, 506.5), (18, 140.28125, 519.5), (16, 141.65625, 532.5), (17, 142.578125, 545.0), (15, 143.953125, 561.5), (25, 144.859375, 601.0), (14, 146.015625, 606.0), (17, 149.25, 753.25), (10, 151.015625, 620.25), (24, 152.96875, 748.25), (9, 154.5, 658.25), (19, 155.703125, 677.75), (20, 156.796875, 676.5), (19, 158.125, 676.5), (14, 159.375, 669.5), (15, 160.5, 666.75), (18, 163.109375, 625.75), (20, 164.421875, 640.5), (20, 165.484375, 640.0), (21, 166.921875, 632.0), (22, 168.078125, 622.5), (22, 169.265625, 614.75), (22, 170.6875, 605.5), (21, 171.828125, 599.0), (25, 173.171875, 594.75), (23, 174.21875, 597.5), (19, 175.609375, 587.5), (24, 176.859375, 590.5), (25, 178.0, 598.5), (26, 179.421875, 572.0), (23, 180.75, 567.0), (25, 181.859375, 562.75), (20, 183.109375, 559.75), (20, 184.3125, 564.5), (14, 185.578125, 580.75), (19, 190.859375, 3071.75), (18, 192.125, 3018.75), (22, 193.359375, 2968.0), (25, 194.59375, 2929.0), (23, 195.8125, 2907.75), (14, 198.28125, 2868.75), (24, 199.515625, 2819.75), (12, 200.734375, 2761.5), (21, 202.015625, 2765.75), (21, 203.140625, 2747.75), (17, 204.53125, 2072.75), (17, 205.796875, 2073.25), (23, 207.046875, 2014.25), (21, 208.234375, 2033.25), (19, 209.484375, 1954.5), (21, 210.71875, 1974.25), (18, 211.953125, 1901.75), (20, 213.28125, 1680.5), (19, 214.765625, 1356.75), (20, 215.921875, 1375.75), (19, 217.171875, 1426.25), (21, 218.375, 1439.75), (20, 219.53125, 1465.5), (9, 220.890625, 1353.0), (12, 224.609375, 1264.5), (31, 236.4375, 248.0), (11, 238.734375, 233.75), (30, 241.453125, 250.5), (11, 244.890625, 936.5), (10, 248.171875, 1259.0), (10, 249.375, 1243.75), (10, 251.78125, 1235.75), (11, 253.078125, 1225.5), (11, 254.25, 1216.5), (11, 255.5, 1209.25), (10, 256.75, 1206.75), (11, 258.046875, 1193.5), (10, 259.296875, 1191.5), (10, 260.4375, 1199.25), (10, 261.671875, 1183.75), (10, 262.9375, 1182.5), (11, 264.1875, 1174.0), (46, 271.0, 764.75), (46, 272.265625, 763.5), (47, 273.4375, 749.25), (46, 274.75, 749.25), (25, 275.953125, 773.0), (24, 277.125, 760.75), (19, 280.078125, 1182.0), (20, 281.25, 1190.75), (18, 282.515625, 1194.75), (21, 286.125, 1215.75), (21, 287.359375, 1218.0), (20, 288.65625, 1235.25), (21, 289.875, 1243.25), (20, 291.03125, 1250.5), (19, 292.25, 1252.75), (19, 293.515625, 1269.75), (29, 299.953125, 237.75), (24, 302.5625, 224.75), (10, 303.78125, 227.75), (30, 305.015625, 238.5), (10, 306.203125, 225.75), (19, 301.125, 1008.25), (16, 309.21875, 1496.75), (17, 310.40625, 1516.0), (15, 311.609375, 1488.0), (16, 312.90625, 1461.25), (15, 314.90625, 847.5), (25, 316.15625, 834.5), (17, 317.375, 825.75), (18, 319.125, 1304.25), (15, 320.390625, 1282.25), (16, 321.625, 1242.75), (16, 322.796875, 1272.5), (17, 323.96875, 1284.0), (15, 329.65625, 2234.5), (14, 330.828125, 2292.5), (20, 332.90625, 997.5), (12, 334.6875, 1777.25), (14, 335.859375, 1862.25), (14, 337.0625, 1949.75), (13, 338.265625, 2035.75), (11, 339.484375, 2106.75), (10, 344.34375, 2101.25), (9, 348.046875, 2146.0), (24, 349.25, 2264.5), (25, 350.5, 2266.0)],i]
#         # data = [input('command'),i]
#         server.send_list(data)
#         # server.send_string(str(data))
#         print('server send {}'.format(data))
#         recv = server.recv_list()
#         # recv = server.recv_string(1024)
#         print('server receive {}'.format(recv))
#         i+=1
#         time.sleep(1)
#     except:
#         server.close()
#         break


import TCN_socket
server = TCN_socket.TCP_server(50000)
try:
    server.recv_list()
except KeyboardInterrupt:
    print('keyboard')

server.close()
